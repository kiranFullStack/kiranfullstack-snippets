{
    "‚≠êÔ∏è React functional component": {
      "prefix": "rfc",
      "body": [
        "import React from 'react'",
        "",
        "export default function ${TM_FILENAME_BASE}() {",
        "  return (",
        "    <div>",
        "      <h1>${TM_FILENAME_BASE}</h1>",
        "      ${1}",
        "    </div>",
        "  )",
        "}"
      ],
      "description": "‚≠êÔ∏èReact functional component"
    },

    "‚≠êÔ∏è useState": {
    "prefix": "us",
    "body": [
      "const [${1:state}, set${1:state}] = useState(${2})",
      ""
    ],
    "description": "useState"
    },

    "‚≠êÔ∏è useEffect": {
      "prefix": "ue",
      "body": [
        "useEffect(() => {",
        "${1}",
        "}, [])"
      ],
      "description": "useEffect"
    },

    "‚≠êÔ∏è React memoise component": {
      "prefix": "memo",
      "body": [
        "export default memo(${TM_FILENAME_BASE});"
      ],
      "description": "React memoise component"
    },

    "‚≠êÔ∏è FETCH-GET": {
      "prefix": "fetch-get",
      "body": [
        "  let url = \"https://jsonplaceholder.typicode.com/todos/${1:**ID--remove to fetch all**}\"",
        "  fetch(url, {",
        "    method: \"GET\",",
        "  })",
        "    .then((response) => response.json())",
        "    .then((result) => {",
        "      console.log(result, \"Get Successful‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ\")",
        "    })",
        "    .catch((error) => {",
        "      console.log(error, \"Get Errored‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå\")",
        "    })"
      ],
      "description": "FETCH-GET"
    },

    "‚≠êÔ∏è FETCH-POST": {
      "prefix": "fetch-post",
      "body": [
        "  let url = \"https://jsonplaceholder.typicode.com/posts\"",
        "  let myPayloadToPost = { firstKey: \"firstValue\", secondKey: \"secondValue\" }",
        "  fetch(url, {",
        "    method: \"POST\",",
        "    body: JSON.stringify(myPayloadToPost),",
        "  })",
        "    .then((response) => response.json())",
        "    .then((json) => console.log(json, \"Post Successful‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ\"))",
        "    .catch((error) => {",
        "      console.log(error, \"Post Errored‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå\")",
        "    })"
      ],
      "description": "FETCH-POST"
    },

    "‚≠êÔ∏è FETCH-PUT": {
      "prefix": "fetch-put",
      "body": [
        "  let url = \"https://jsonplaceholder.typicode.com/todos/${1:**ID**}\"",
        "  let myPayloadToPut = { firstKey: \"firstValue\", secondKey: \"secondValue\" }",
        "  fetch(url, {",
        "    method: \"PUT\",",
        "    body: JSON.stringify(myPayloadToPut),",
        "  })",
        "    .then((response) => response.json())",
        "    .then((json) => console.log(json, \"Put Successful‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ\"))",
        "    .catch((error) => {",
        "      console.log(error, \"Put Errored‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå\")",
        "    })"
      ],
      "description": "FETCH-PUT"
    },

    "‚≠êÔ∏è FETCH-PATCH": {
      "prefix": "fetch-patch",
      "body": [
        "  let url = \"https://jsonplaceholder.typicode.com/todos/${1:**ID**}\"",
        "  let myPayloadToPatch = { keyToBeChanged: \"valueToBeChanged\", notRequiredIfNoChangesKey: \"notRequiredIfNoChangesKey\" }",
        "  fetch(url, {",
        "    method: \"PATCH\",",
        "    body: JSON.stringify(myPayloadToPatch),",
        "  })",
        "    .then((response) => response.json())",
        "    .then((json) => console.log(json, \"Patch Successful‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ\"))",
        "    .catch((error) => {",
        "      console.log(error, \"Patch Errored‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå\")",
        "    })"
      ],
      "description": "FETCH-PATCH"
    },

    "‚≠êÔ∏è FETCH-DELETE": {
      "prefix": "fetch-delete",
      "body": [
        "  let url = \"https://jsonplaceholder.typicode.com/todos/${1:**ID**}\"",
        "  fetch(url, {",
        "    method: \"DELETE\",",
        "  })",
        "    .then((response) => response.json())",
        "    .then((json) => console.log(json, \"Delete Successful‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ\"))",
        "    .catch((error) => {",
        "      console.log(error, \"Delete Errored‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå\")",
        "    })"
      ],
      "description": "FETCH-DELETE"
    },

    "‚≠êÔ∏è useDispatch": {
      "prefix": "ud",
      "body": [
        "import { useDispatch, useSelector } from 'react-redux'",
        "",
        "const count = useSelector((state) => state.counter.value)",
        "const dispatch = useDispatch()"
      ],
      "description": "useDispatch"
    },

    "‚≠êÔ∏è Redux slice for counter": {
      "prefix": "slice",
      "body": [
        "import { createSlice } from '@reduxjs/toolkit'",
        "",
        "const initialState = {",
        "  value: 0,",
        "}",
        "",
        "export const counterSlice = createSlice({",
        "  name: 'counter',",
        "  initialState,",
        "  reducers: {",
        "    increment: (state) => {",
        "      state.value += 1",
        "    },",
        "    decrement: (state) => {",
        "      state.value -= 1",
        "    },",
        "    incrementByAmount: (state, action) => {",
        "      state.value += action.payload",
        "    },",
        "  },",
        "})",
        "",
        "export const { increment, decrement, incrementByAmount } = counterSlice.actions",
        "",
        "export default counterSlice.reducer",
        ""
      ],
      "description": "Redux slice for counter"
    },

    "‚≠êÔ∏è Redux store for counter": {
      "prefix": "store",
      "body": [
        "import { configureStore } from '@reduxjs/toolkit'",
        "import counterReducer from './counterSlice'",
        "",
        "export default configureStore({",
        "  reducer: {",
        "    counter: counterReducer",
        "  }",
        "})"
      ],
      "description": "Redux store for counter"
    },


    "‚≠êÔ∏è Formatted JSON.stringify in <pre> tag": {
      "prefix": "JSON",
      "body": ["<pre>{JSON.stringify(${CLIPBOARD}${1}, null, 2)}</pre>"],
      "description": "Formatted JSON.stringify in <pre> tag, copied text"
    },

    "‚≠êÔ∏è console.log()": {
      "prefix": "c",
      "body": [
        "console.log(${CLIPBOARD}${1}, '<------This is the dataüòäüòäüòäüòäüòäüòäüòäüòäüòäüòäüòäüòä')"
      ],
      "description": "Console log, copied text"
    },

    "‚≠êÔ∏è Function definition": {
      "prefix": "fn",
      "body": [
        "const ${1:fnName} = (params) => {",
        "${1}",
        "}"
      ],
      "description": "Function definition"
    },

    "‚≠êÔ∏è Short Arrow function": {
      "prefix": "f",
      "body": [
        "()=>{${1}}"
      ],
      "description": "Short Arrow function"
    },

    "‚≠êÔ∏è map data": {
      "prefix": "map",
      "body": [
        "{${CLIPBOARD}?${1}.map((item) => (",
        "  <div key={item.id}>",
        "    <h1>{item.id}</h1>",
        "    <button onClick={() => alert(item.id)}>‚ù§Ô∏è</button>",
        "  </div>",
        "))}"
      ],
      "description": "‚≠êÔ∏è map data"
    },

    "‚≠êÔ∏è React Router <Route>": {
      "prefix": "Route",
      "body": [
        "<Route path='/${1:urlpathName}' element={<${2:ComponentName} />}/>"
      ],
      "description": "React Router <Route>"
    },

    "‚≠êÔ∏è React Router useParams": {
      "prefix": "up",
      "body": [
        "const { id } = useParams()",
        ""
      ],
      "description": "React Router useParams"
    },

    "‚≠êÔ∏è React Router Link": {
      "prefix": "Link",
      "body": [
        "<Link to=\"/${1:name}\">${2:Name}</Link>"
      ],
      "description": "React Router Link"
    },

    "‚≠êÔ∏è React Router NavLink": {
      "prefix": "NavLink",
      "body": [
        "<NavLink",
        "  to=\"/${1:name}\"",
        "  style={({ isActive }) => ({ color: isActive ? \"red\" : \"black\" })}",
        ">",
        "  ${2:Name}",
        "</NavLink>"
      ],
      "description": "React Router NavLink"
    },

    "‚≠êÔ∏è React Router Navigate": {
      "prefix": "Navigate",
      "body": [
        "<Navigate to=\"/${1}\" />"
      ],
      "description": "React Router Navigate"
    },

    "‚≠êÔ∏è React Router useNavigate": {
      "prefix": "un",
      "body": [
        "const navigate = useNavigate()",
        "",
        "function onSubmit() {",
        "  navigate(\"/${1}\")",
        "}"
      ],
      "description": "React Router useNavigate"
    },

    "‚≠êÔ∏è React Router useSearchParams": {
      "prefix": "usp",
      "body": [
        "const [searchParams, setSearchParams] = useSearchParams()",
        "const q = searchParams.get('q')"
      ],
      "description": "‚≠êÔ∏è React Router useSearchParams"
    },

    "‚≠êÔ∏è React Router useLocation": {
      "prefix": "ul",
      "body": [
        "const location = useLocation()"
      ],
      "description": "‚≠êÔ∏è React Router useLocation"
    }
  }
